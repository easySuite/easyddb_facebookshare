<?php
/**
 * @file
 *
 */

/**
 * Implements hook_ctools_plugin_directory().
 */
function artesis_facebookshare_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && !empty($plugin)) {
    return "plugins/$plugin";
  }
}

/**
 * Implements hook_block_info().
 */
function artesis_facebookshare_block_info() {
  $blocks['facebook_share'] = array(
    'info' => t('Facebook share'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function artesis_facebookshare_block_configure($delta = '') {
  $form = array();

  switch($delta) {
    case 'facebook_share':
      $state = variable_get('artesis_facebookshare_block_settings', array());
      $form['custom_settings'] = array(
        '#type' => 'fieldset',
        '#title' => t('Facebook plugin settings'),
        '#collapsible' => FALSE,
      );
      $form['custom_settings'] += artesis_facebookshare_settings_form($state);
    break;
  }

  return $form;
}

/**
 * Implements hook_block_save().
 */
function artesis_facebookshare_block_save($delta = '', $edit = array()) {
  switch($delta) {
    case 'facebook_share':
      variable_set('artesis_facebookshare_block_settings', $edit);
    break;
  }
}

/**
 * Implements hook_block_view().
 */
function artesis_facebookshare_block_view($delta = '') {
  $block = array();

  switch($delta) {
    case 'facebook_share':
      $settings = variable_get('artesis_facebookshare_block_settings', array());
      $block['content'] = artesis_facebookshare_content($settings);
    break;
  }

  return $block;
}

/**
 * Provides common content structure.
 *
 * @param array $settings
 *   FB plugin settings.
 * @return array
 *   Render array.
 */
function artesis_facebookshare_content(array $settings) {
  $path = drupal_get_path('module', 'artesis_facebookshare');
  // Settings are stored per item ID.
  $id = empty($settings['id']) ? 'artesis_facebookshare_default' : $settings['id'];
  // Filter unwanted items.
  $js_settings = array_intersect_key(
    $settings,
    array_flip(array('layout', 'action', 'share', 'show_faces'))
  );

  $data = array(
    '#markup' => '<div class="artesis_facebookshare" id="' . $id .'"></div>',
    '#attached' => array(
      'js' => array(
        $path . '/js/jquery.facebook.min.js',
        $path . '/js/artesis_facebookshare.js',
        array(
          'type' => 'setting',
          'data' => array(
            'artesis_facebookshare' => array($id => $js_settings),
          ),
        ),
      ),
    ),
  );

  return $data;
}

/**
 * Provides common settings form.
 *
 * @param array $form_state
 *   Stored form data.
 * @return array
 *   Drupal form.
 */
function artesis_facebookshare_settings_form(array $form_state) {
  $form = array();
  $form['layout'] = array(
    '#type' => 'select',
    '#options' => array(
      'standard' => t('Standard'),
      'box_count' => t('Box count'),
      'button_count' => t('Button count'),
      'button' => t('Button'),
    ),
    '#title' => t('Layout'),
    '#default_value' => isset($form_state['layout']) ? $form_state['layout'] : 0,
  );

  $form['action'] = array(
    '#type' => 'select',
    '#options' => array(
      'like' => t('Like'),
      'recommend' => t('Recommend'),
    ),
    '#title' => t('Action'),
    '#default_value' => isset($form_state['action']) ? $form_state['action'] : 0,
  );

  $form['share'] = array(
    '#type' => 'checkbox',
    '#return_value' => "true",
    '#default_value' => isset($form_state['share']) ? $form_state['share'] : "false",
    '#title' => t('Enable share button'),
  );

  $form['show_faces'] = array(
    '#type' => 'checkbox',
    '#return_value' => "true",
    '#default_value' => isset($form_state['show_faces']) ? $form_state['show_faces'] : "false",
    '#title' => t('Display faces'),
  );

  $id = isset($form_state['id']) ? $form_state['id'] : uniqid('facebook_plugin_id-');
  $form['id'] = array(
    '#type' => 'hidden',
    '#value' => $id,
  );

  return $form;
}

/**
 * Implements hook_preprocess_page().
 * Removes delete button on non-nodelist panes for
 * certain use role (IPE_RESTRICTED_ROLE).
 * Additionally, it adds open graph metadata for
 * pages searchResult, ting object and ting collection.
 */
function artesis_facebookshare_preprocess_page($page) {
  $user = $GLOBALS['user'];

  // Detect different pages and add the appropriate open graph metadata.
  $og_elements = array();
  $og_title = '';
  $og_description = '';
  $og_imageurl = '';
  $og_url = '';
  if (arg(0) == 'ting' && arg(1) == 'object' && arg(2) != NULL) {
    $ting_entity = ting_object_load(arg(2));

    if (isset($ting_entity->ting_cover['und'][0]['local_id'])) {
      $uri = ting_covers_object_path($ting_entity->ting_cover['und'][0]['local_id']);
      $wrapper = file_stream_wrapper_get_instance_by_uri($uri);
      if ($wrapper) {
        $og_imageurl = $wrapper->getExternalUrl();
      }
    }
    if (isset($ting_entity->reply->record['dc:title'])) {
      if (isset($ting_entity->reply->record['dc:title'][0])) {
        if (is_string($ting_entity->reply->record['dc:title'][0])) {
          $og_title = $ting_entity->reply->record['dc:title'][0];
        }
        elseif (is_array($ting_entity->reply->record['dc:title'][0])) {
          if (isset($ting_entity->reply->record['dc:title'][0][0])) {
            $og_title = $ting_entity->reply->record['dc:title'][0][0];
          }
        }
      }
      elseif (isset($ting_entity->reply->record['dc:title']['dkdcplus:full'][0])) {
        $og_title = $ting_entity->reply->record['dc:title']['dkdcplus:full'][0];
      }
    }
    if (isset($ting_entity->reply->record['dcterms:abstract']) && is_array($ting_entity->reply->record['dcterms:abstract'])) {
      $abstract_array = array_shift(array_values($ting_entity->reply->record['dcterms:abstract']));
      if (isset($abstract_array[0])) {
        $og_description = $abstract_array[0];
      }
    }
    $og_url = url(NULL, array('absolute' => TRUE)) . current_path();
  }
  elseif (arg(0) == 'ting' && arg(1) == 'collection' && arg(2) != NULL) {
    $ting_collection = ting_object_load(arg(2));
    if (isset($ting_collection->ting_cover['und'][0]['local_id'])) {
      $uri = ting_covers_object_path($ting_collection->ting_cover['und'][0]['local_id']);
      $wrapper = file_stream_wrapper_get_instance_by_uri($uri);
      if ($wrapper) {
        $og_imageurl = $wrapper->getExternalUrl();
      }
    }
    if (count($ting_collection->reply->record['dc:title']) > 0 ) {
      $first_title_element = array_shift(array_values($ting_collection->reply->record['dc:title']));
      if (isset($first_title_element[0])) {
        if (is_string($first_title_element[0])) {
          $og_title = $first_title_element[0];
        }
      }
      elseif (isset($ting_collection->reply->record['dc:title']['dkdcplus:full'][0])) {
        if (is_string($ting_collection->reply->record['dc:title']['dkdcplus:full'][0])) {
          $og_title = $ting_collection->reply->record['dc:title']['dkdcplus:full'][0];
        }
      }
    }
    if (isset($ting_collection->reply->record['dcterms:abstract']) && is_array($ting_collection->reply->record['dcterms:abstract'])) {
      $abstract_array = array_shift(array_values($ting_collection->reply->record['dcterms:abstract']));
      if (isset($abstract_array[0])) {
        $og_description = $abstract_array[0];
      }
    }
    $og_url = url(NULL, array('absolute' => TRUE)) . current_path();
  }
  elseif (arg(0) == 'search' && arg(1) == 'ting') {
    $og_title = t('Search results');
    $og_description = arg(2) != NULL ? t('Search results for') . ' ' . arg(2) . '.' : url(NULL, array('absolute' => TRUE)) . current_path();
    $og_url = url(NULL, array('absolute' => TRUE)) . current_path();
  }

  if ($og_title !='') {
    $og_elements['og_title'] = array(
      '#tag' => 'meta',
      '#attributes' => array(
        'property' => 'og:title',
        'content' => $og_title,
      ),
    );
  }

  if ($og_description != '') {
    $og_elements['og_description'] = array(
      '#tag' => 'meta',
      '#attributes' => array(
        'property' => 'og:description',
        'content' => $og_description,
      ),
    );
  }

  // @todo find a way to retrieve this.
  if ($og_imageurl != '') {
    $og_elements['og_image'] = array(
      '#tag' => 'meta',
      '#attributes' => array(
        'property' => 'og:image',
        'content' => $og_imageurl,
      ),
    );
  }
  if ($og_url != '') {
    $og_elements['og_url'] = array(
      '#tag' => 'meta',
      '#attributes' => array(
        'property' => 'og:url',
        'content' => $og_url,
      ),
    );
  }
  if (!empty($og_elements)) {
    foreach ($og_elements as $key => $og_element) {
          drupal_add_html_head($og_element, $key);
    }
  }
}
